<%= content_for :title, "Upload Music" %>

<!-- Upload Interface Container -->
<div class="min-h-screen bg-zinc-900 text-gray-100 p-4">
  <div class="max-w-4xl mx-auto">
    
    <!-- Header -->
    <div class="mb-6">
      <h1 class="text-3xl font-bold text-center mb-2">Create Music Content</h1>
      <p class="text-gray-400 text-center">Upload songs, create artists, and manage albums</p>
      
      <!-- Workflow Guide -->
      <div class="bg-blue-800 border border-blue-600 rounded-lg p-4 mt-4">
        <div class="flex items-start">
          <svg class="w-6 h-6 mr-3 text-blue-300 flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
          </svg>
          <div>
            <h3 class="text-sm font-medium text-blue-200 mb-2">Recommended Workflow</h3>
            <ol class="text-sm text-blue-100 space-y-1">
              <li><strong>1. Create Artist</strong> - Start by adding artists using the "Create Artist" tab</li>
              <li><strong>2. Create Album</strong> - (Optional) Create albums and assign them to artists</li>
              <li><strong>3. Upload Song</strong> - Upload songs and assign them to artists/albums</li>
            </ol>
            <p class="text-xs text-blue-200 mt-2">💡 You can also create artists and albums inline while uploading songs!</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Tab Navigation -->
    <div class="mb-6">
      <nav class="flex space-x-1 bg-gray-800 p-1 rounded-lg">
        <button 
          id="song-tab" 
          class="tab-button active flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors duration-200 bg-slate-900 text-gray-100"
          data-tab="song">
          Upload Song
        </button>
        <button 
          id="artist-tab" 
          class="tab-button flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors duration-200 text-gray-400 hover:text-gray-100"
          data-tab="artist">
          Create Artist
        </button>
        <button 
          id="album-tab" 
          class="tab-button flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors duration-200 text-gray-400 hover:text-gray-100"
          data-tab="album">
          Create Album
        </button>
      </nav>
    </div>

    <!-- Turbo Frame for form submissions -->
    <%= turbo_frame_tag "upload_frame" do %>
      <%= render partial: "upload/index" %>
    <% end %>

    <!-- Back to Dashboard Link -->
    <div class="text-center mt-8">
      <%= link_to "← Back to Music", music_path, 
          class: "text-gray-400 hover:text-gray-100 transition-colors duration-200" %>
    </div>

  </div>
</div>

<!-- JavaScript for Tab Switching and Form Interactions -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Tab switching functionality
  const tabButtons = document.querySelectorAll('.tab-button');
  const tabContents = document.querySelectorAll('.tab-content');
  
  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      const targetTab = button.getAttribute('data-tab');
      
      // Remove active classes from all tabs
      tabButtons.forEach(btn => {
        btn.classList.remove('bg-slate-900', 'text-gray-100');
        btn.classList.add('text-gray-400');
      });
      
      // Hide all tab contents
      tabContents.forEach(content => {
        content.classList.add('hidden');
      });
      
      // Activate clicked tab
      button.classList.add('bg-slate-900', 'text-gray-100');
      button.classList.remove('text-gray-400');
      
      // Show corresponding content
      document.getElementById(targetTab + '-content').classList.remove('hidden');
    });
  });
  
  // Create New Artist toggle for song form
  const createArtistCheckbox = document.getElementById('create_new_artist');
  const artistSelect = document.getElementById('artist_select');
  const newArtistFields = document.getElementById('new_artist_fields');
  
  if (createArtistCheckbox && artistSelect && newArtistFields) {
    createArtistCheckbox.addEventListener('change', function() {
      if (this.checked) {
        artistSelect.disabled = true;
        artistSelect.value = '';
        newArtistFields.classList.remove('hidden');
      } else {
        artistSelect.disabled = false;
        newArtistFields.classList.add('hidden');
      }
    });
  }
  
  // Create New Album toggle for song form
  const createAlbumCheckbox = document.getElementById('create_new_album');
  const albumSelect = document.getElementById('album_select');
  const newAlbumFields = document.getElementById('new_album_fields');
  
  if (createAlbumCheckbox && albumSelect && newAlbumFields) {
    createAlbumCheckbox.addEventListener('change', function() {
      if (this.checked) {
        albumSelect.disabled = true;
        albumSelect.value = '';
        newAlbumFields.classList.remove('hidden');
      } else {
        albumSelect.disabled = false;
        newAlbumFields.classList.add('hidden');
      }
    });
  }
  
  // Create New Artist toggle for album form
  const createAlbumArtistCheckbox = document.getElementById('create_album_artist');
  const albumArtistSelect = document.getElementById('album_artist_select');
  const albumArtistFields = document.getElementById('album_artist_fields');
  
  if (createAlbumArtistCheckbox && albumArtistSelect && albumArtistFields) {
    createAlbumArtistCheckbox.addEventListener('change', function() {
      if (this.checked) {
        albumArtistSelect.disabled = true;
        albumArtistSelect.value = '';
        albumArtistFields.classList.remove('hidden');
      } else {
        albumArtistSelect.disabled = false;
        albumArtistFields.classList.add('hidden');
      }
    });
  }
  
  // Form validation feedback
  const forms = document.querySelectorAll('form[data-turbo-frame]');
  forms.forEach(form => {
    form.addEventListener('submit', function(e) {
      const submitButton = form.querySelector('input[type="submit"]');
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.value = 'Processing...';
        
        // Re-enable button after a delay in case of errors
        setTimeout(() => {
          submitButton.disabled = false;
          submitButton.value = submitButton.getAttribute('data-original-value') || 'Submit';
        }, 5000);
      }
    });
  });
});
</script>